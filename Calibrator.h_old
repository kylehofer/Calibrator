/*
 * Copyright (c) 2018 Kyle Hofer
 * Email: kylehofer@neurak.com.au
 * Web: https://neurak.com.au/
 *
 * This file is part of Calibrator.
 *
 * Calibrator is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * Calibrator is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

/*
 * This library calculates values to calibrator a MPU6050
 */

#include <Wire.h>

#ifndef CALIBRATOR_H_
#define CALIBRATOR_H_


// MPU6050 I2C Address
#define MPU6050_ADDRESS			0x68

/*
 * MPU6050 Data Register Macros
 */
#define MPU6050_CONFIG			0x1A
#define GYRO_CONFIG				0x1B
#define ACCEL_CONFIG			0x1C
#define PWR_MGMT_1				0x6B
#define ACCEL_XOUT_H			0x3B
#define WHO_AM_I				0x75

/*
 * MPU6050 Data Bit Settings Macro
 */

// Digital Low Pass Filter (DLPF) settings
#define DLPF_CFG_0		0
#define DLPF_CFG_1		1
#define DLPF_CFG_2		2

// Full Scale Range Gyroscope Settings
#define FS_SEL_0		3
#define FS_SEL_1		4

// Full Scale Range Accelerometer Settings
#define AFS_SEL_0		3
#define AFS_SEL_1		4

//MPU6050 Data Packet Size
#define MPU6050_DATA_SIZE 		14

#define M_PI 3.14159265358979323846
#define TIME_CONST 0.001
#define GYRO_WEIGHT 20
#define AVERAGE_MAX 255
#define ACCEL_BASE_SENSITIVITY 16384

/*
 * Frequency of Data Probes
 * With a time of 50ms, 20 probes will occur per second.
 * At 20 probes per second the calculation will finish in 12.5 seconds.
 */
#define TIME_DELAY 50

//Used to both access and set raw data array sizes
#define SMALL_SENSOR_DATA_FIELDS_LEN (sizeof(Small_Sensor_Data_Fields) / sizeof(int16_t))
#define LARGE_SENSOR_DATA_FIELDS_LEN (sizeof(Large_Sensor_Data_Fields) / sizeof(int32_t))

/*
 * Data storage structs used for calculating average/min/max
 * Can access both raw data arrays and individual fields
 */

typedef struct {
	int16_t AccX, AccY, AccZ, Temp, GyrX, GyrY, GyrZ;
} Small_Sensor_Data_Fields;

typedef union {
	Small_Sensor_Data_Fields fields;
	int16_t raw[SMALL_SENSOR_DATA_FIELDS_LEN];
} Small_Sensor_Data_t;

typedef struct {
	int32_t AccX, AccY, AccZ, Temp, GyrX, GyrY, GyrZ;
} Large_Sensor_Data_Fields;

typedef union {
	Large_Sensor_Data_Fields fields;
	int32_t raw[LARGE_SENSOR_DATA_FIELDS_LEN];
} Large_Sensor_Data_t;

void SENSORDATA_min(Small_Sensor_Data_t *to, Small_Sensor_Data_t *from);
void SENSORDATA_max(Small_Sensor_Data_t *to, Small_Sensor_Data_t *from);
void SENSORDATA_copy(Small_Sensor_Data_t *to, Small_Sensor_Data_t *from);
void SENSORDATA_copy(Large_Sensor_Data_t *to, Large_Sensor_Data_t *from);
void SENSORDATA_addToTotal(Large_Sensor_Data_t *to, Small_Sensor_Data_t *from);
void SENSORDATA_calculateAverage(Small_Sensor_Data_t *to, Large_Sensor_Data_t *from);

void MPU6050_sensor_read();
void MPU6050_write_byte(uint16_t start, uint8_t data);
bool MPU6050_init();

void CALIBRATOR_calculate();
void CALIBRATOR_display();
uint8_t CALIBRATOR_waitForInput();

void CALIBRATOR_init();

#endif /* PID_H_ */